{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"EventDispatcher.js","sources":["file:///project/sandbox/user-workspace/node_modules/src/controls/EventDispatcher.ts"],"sourcesContent":["/*\nDue to @types/three r168 breaking change\nwe have to manually copy the EventDispatcher class from three.js.\nSo this files merges the declarations from https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/three/src/core/EventDispatcher.d.ts\nwith the implementation from https://github.com/mrdoob/three.js/blob/dev/src/core/EventDispatcher.js\nMore info in https://github.com/pmndrs/three-stdlib/issues/387\n*/\n\n/**\n * The minimal basic Event that can be dispatched by a {@link EventDispatcher<>}.\n */\nexport interface BaseEvent<TEventType extends string = string> {\n    readonly type: TEventType;\n    // not defined in @types/three\n    target: any;\n}\n\n/**\n * The minimal expected contract of a fired Event that was dispatched by a {@link EventDispatcher<>}.\n */\nexport interface Event<TEventType extends string = string, TTarget = unknown> {\n    readonly type: TEventType;\n    readonly target: TTarget;\n}\n\nexport type EventListener<TEventData, TEventType extends string, TTarget> = (\n    event: TEventData & Event<TEventType, TTarget>,\n) => void;\n\nexport class EventDispatcher<TEventMap extends {} = {}> {\n    // not defined in @types/three\n    private _listeners: any;\n\n    /**\n     * Adds a listener to an event type.\n     * @param type The type of event to listen to.\n     * @param listener The function that gets called when the event is fired.\n     */\n\taddEventListener<T extends Extract<keyof TEventMap, string>>(\n        type: T,\n        listener: EventListener<TEventMap[T], T, this>,\n    ): void {\n\n\t\tif ( this._listeners === undefined ) this._listeners = {};\n\n\t\tconst listeners = this._listeners;\n\n\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\tlisteners[ type ] = [];\n\n\t\t}\n\n\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\tlisteners[ type ].push( listener );\n\n\t\t}\n\n\t}\n\n\t/**\n     * Checks if listener is added to an event type.\n     * @param type The type of event to listen to.\n     * @param listener The function that gets called when the event is fired.\n     */\n    hasEventListener<T extends Extract<keyof TEventMap, string>>(\n        type: T,\n        listener: EventListener<TEventMap[T], T, this>,\n    ): boolean {\n\n\t\tif ( this._listeners === undefined ) return false;\n\n\t\tconst listeners = this._listeners;\n\n\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\n\n\t}\n\n\t/**\n     * Removes a listener from an event type.\n     * @param type The type of the listener that gets removed.\n     * @param listener The listener function that gets removed.\n     */\n    removeEventListener<T extends Extract<keyof TEventMap, string>>(\n        type: T,\n        listener: EventListener<TEventMap[T], T, this>,\n    ): void {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tconst listeners = this._listeners;\n\t\tconst listenerArray = listeners[ type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tconst index = listenerArray.indexOf( listener );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n     * Fire an event type.\n     * @param event The event that gets fired.\n     */\n    dispatchEvent<T extends Extract<keyof TEventMap, string>>(event: BaseEvent<T> & TEventMap[T]): void {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tconst listeners = this._listeners;\n\t\tconst listenerArray = listeners[ event.type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tevent.target = this;\n\n\t\t\t// Make a copy, in case listeners are removed while iterating.\n\t\t\tconst array = listenerArray.slice( 0 );\n\n\t\t\tfor ( let i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t}\n\n\t\t\tevent.target = null;\n\n\t\t}\n\n\t}\n\n}"],"names":[],"mappings":";;;;;;;;;;;;;;AA6BO,MAAM,gBAA2C;IAAjD,aAAA;QAEK,8BAAA;QAAA,cAAA,IAAA,EAAA;IAAA;IAAA;;;;GAAA,GAOX,iBACO,IAAA,EACA,QAAA,EACI;QAEV,IAAK,IAAA,CAAK,UAAA,KAAe,KAAA,GAAY,IAAA,CAAK,UAAA,GAAa,CAAA;QAEvD,MAAM,YAAY,IAAA,CAAK,UAAA;QAElB,IAAA,SAAA,CAAW,IAAK,CAAA,KAAM,KAAA,GAAY;YAE3B,SAAA,CAAA,IAAK,CAAA,GAAI,EAAA;QAErB;QAEA,IAAK,SAAA,CAAW,IAAK,CAAA,CAAE,OAAA,CAAS,QAAS,MAAM,CAAA,GAAM;YAEzC,SAAA,CAAA,IAAK,CAAA,CAAE,IAAA,CAAM,QAAS;QAElC;IAED;IAAA;;;;MAAA,GAOG,iBACI,IAAA,EACA,QAAA,EACO;QAEb,IAAK,IAAA,CAAK,UAAA,KAAe,KAAA,GAAmB,OAAA;QAE5C,MAAM,YAAY,IAAA,CAAK,UAAA;QAEhB,OAAA,SAAA,CAAW,IAAK,CAAA,KAAM,KAAA,KAAa,SAAA,CAAW,IAAK,CAAA,CAAE,OAAA,CAAS,QAAS,MAAM,CAAA;IAErF;IAAA;;;;MAAA,GAOG,oBACI,IAAA,EACA,QAAA,EACI;QAEV,IAAK,IAAA,CAAK,UAAA,KAAe,KAAA,GAAY;QAErC,MAAM,YAAY,IAAA,CAAK,UAAA;QACjB,MAAA,gBAAgB,SAAA,CAAW,IAAK,CAAA;QAEtC,IAAK,kBAAkB,KAAA,GAAY;YAE5B,MAAA,QAAQ,cAAc,OAAA,CAAS,QAAS;YAE9C,IAAK,UAAU,CAAA,GAAM;gBAEN,cAAA,MAAA,CAAQ,OAAO,CAAE;YAEhC;QAED;IAED;IAAA;;;MAAA,GAMG,cAA0D,KAAA,EAA0C;QAEtG,IAAK,IAAA,CAAK,UAAA,KAAe,KAAA,GAAY;QAErC,MAAM,YAAY,IAAA,CAAK,UAAA;QACjB,MAAA,gBAAgB,SAAA,CAAW,MAAM,IAAK,CAAA;QAE5C,IAAK,kBAAkB,KAAA,GAAY;YAElC,MAAM,MAAA,GAAS,IAAA;YAGT,MAAA,QAAQ,cAAc,KAAA,CAAO,CAAE;YAErC,IAAA,IAAU,IAAI,GAAG,IAAI,MAAM,MAAA,EAAQ,IAAI,GAAG,IAAO;gBAEhD,KAAA,CAAO,CAAE,CAAA,CAAE,IAAA,CAAM,IAAA,EAAM,KAAM;YAE9B;YAEA,MAAM,MAAA,GAAS;QAEhB;IAED;AAED","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 89, "column": 0}, "map": {"version":3,"file":"OrbitControls.js","sources":["file:///project/sandbox/user-workspace/node_modules/src/controls/OrbitControls.ts"],"sourcesContent":["import {\n  Matrix4,\n  MOUSE,\n  OrthographicCamera,\n  PerspectiveCamera,\n  Quaternion,\n  Spherical,\n  TOUCH,\n  Vector2,\n  Vector3,\n  Ray,\n  Plane,\n} from 'three'\nimport { EventDispatcher } from './EventDispatcher'\nimport { StandardControlsEventMap } from './StandardControlsEventMap'\n\nconst _ray = /* @__PURE__ */ new Ray()\nconst _plane = /* @__PURE__ */ new Plane()\nconst TILT_LIMIT = Math.cos(70 * (Math.PI / 180))\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nconst moduloWrapAround = (offset: number, capacity: number) => ((offset % capacity) + capacity) % capacity\n\nclass OrbitControls extends EventDispatcher<StandardControlsEventMap> {\n  object: PerspectiveCamera | OrthographicCamera\n  domElement: HTMLElement | undefined\n  // Set to false to disable this control\n  enabled = true\n  // \"target\" sets the location of focus, where the object orbits around\n  target = new Vector3()\n  // How far you can dolly in and out ( PerspectiveCamera only )\n  minDistance = 0\n  maxDistance = Infinity\n  // How far you can zoom in and out ( OrthographicCamera only )\n  minZoom = 0\n  maxZoom = Infinity\n  // How far you can orbit vertically, upper and lower limits.\n  // Range is 0 to Math.PI radians.\n  minPolarAngle = 0 // radians\n  maxPolarAngle = Math.PI // radians\n  // How far you can orbit horizontally, upper and lower limits.\n  // If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )\n  minAzimuthAngle = -Infinity // radians\n  maxAzimuthAngle = Infinity // radians\n  // Set to true to enable damping (inertia)\n  // If damping is enabled, you must call controls.update() in your animation loop\n  enableDamping = false\n  dampingFactor = 0.05\n  // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n  // Set to false to disable zooming\n  enableZoom = true\n  zoomSpeed = 1.0\n  // Set to false to disable rotating\n  enableRotate = true\n  rotateSpeed = 1.0\n  // Set to false to disable panning\n  enablePan = true\n  panSpeed = 1.0\n  screenSpacePanning = true // if false, pan orthogonal to world-space direction camera.up\n  keyPanSpeed = 7.0 // pixels moved per arrow key push\n  zoomToCursor = false\n  // Set to true to automatically rotate around the target\n  // If auto-rotate is enabled, you must call controls.update() in your animation loop\n  autoRotate = false\n  autoRotateSpeed = 2.0 // 30 seconds per orbit when fps is 60\n  reverseOrbit = false // true if you want to reverse the orbit to mouse drag from left to right = orbits left\n  reverseHorizontalOrbit = false // true if you want to reverse the horizontal orbit direction\n  reverseVerticalOrbit = false // true if you want to reverse the vertical orbit direction\n  // The four arrow keys\n  keys = { LEFT: 'ArrowLeft', UP: 'ArrowUp', RIGHT: 'ArrowRight', BOTTOM: 'ArrowDown' }\n  // Mouse buttons\n  mouseButtons: Partial<{\n    LEFT: MOUSE\n    MIDDLE: MOUSE\n    RIGHT: MOUSE\n  }> = {\n    LEFT: MOUSE.ROTATE,\n    MIDDLE: MOUSE.DOLLY,\n    RIGHT: MOUSE.PAN,\n  }\n  // Touch fingers\n  touches: Partial<{\n    ONE: TOUCH\n    TWO: TOUCH\n  }> = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN }\n  target0: Vector3\n  position0: Vector3\n  zoom0: number\n  // the target DOM element for key events\n  _domElementKeyEvents: any = null\n\n  getPolarAngle: () => number\n  getAzimuthalAngle: () => number\n  setPolarAngle: (x: number) => void\n  setAzimuthalAngle: (x: number) => void\n  getDistance: () => number\n  // Not used in most scenarios, however they can be useful for specific use cases\n  getZoomScale: () => number\n\n  listenToKeyEvents: (domElement: HTMLElement) => void\n  stopListenToKeyEvents: () => void\n  saveState: () => void\n  reset: () => void\n  update: () => void\n  connect: (domElement: HTMLElement) => void\n  dispose: () => void\n\n  // Dolly in programmatically\n  dollyIn: (dollyScale?: number) => void\n  // Dolly out programmatically\n  dollyOut: (dollyScale?: number) => void\n  // Get the current scale\n  getScale: () => number\n  // Set the current scale (these are not used in most scenarios, however they can be useful for specific use cases)\n  setScale: (newScale: number) => void\n\n  constructor(object: PerspectiveCamera | OrthographicCamera, domElement?: HTMLElement) {\n    super()\n\n    this.object = object\n    this.domElement = domElement\n\n    // for reset\n    this.target0 = this.target.clone()\n    this.position0 = this.object.position.clone()\n    this.zoom0 = this.object.zoom\n\n    //\n    // public methods\n    //\n\n    this.getPolarAngle = (): number => spherical.phi\n\n    this.getAzimuthalAngle = (): number => spherical.theta\n\n    this.setPolarAngle = (value: number): void => {\n      // use modulo wrapping to safeguard value\n      let phi = moduloWrapAround(value, 2 * Math.PI)\n      let currentPhi = spherical.phi\n\n      // convert to the equivalent shortest angle\n      if (currentPhi < 0) currentPhi += 2 * Math.PI\n      if (phi < 0) phi += 2 * Math.PI\n      let phiDist = Math.abs(phi - currentPhi)\n      if (2 * Math.PI - phiDist < phiDist) {\n        if (phi < currentPhi) {\n          phi += 2 * Math.PI\n        } else {\n          currentPhi += 2 * Math.PI\n        }\n      }\n      sphericalDelta.phi = phi - currentPhi\n      scope.update()\n    }\n\n    this.setAzimuthalAngle = (value: number): void => {\n      // use modulo wrapping to safeguard value\n      let theta = moduloWrapAround(value, 2 * Math.PI)\n      let currentTheta = spherical.theta\n\n      // convert to the equivalent shortest angle\n      if (currentTheta < 0) currentTheta += 2 * Math.PI\n      if (theta < 0) theta += 2 * Math.PI\n      let thetaDist = Math.abs(theta - currentTheta)\n      if (2 * Math.PI - thetaDist < thetaDist) {\n        if (theta < currentTheta) {\n          theta += 2 * Math.PI\n        } else {\n          currentTheta += 2 * Math.PI\n        }\n      }\n      sphericalDelta.theta = theta - currentTheta\n      scope.update()\n    }\n\n    this.getDistance = (): number => scope.object.position.distanceTo(scope.target)\n\n    this.listenToKeyEvents = (domElement: HTMLElement): void => {\n      domElement.addEventListener('keydown', onKeyDown)\n      this._domElementKeyEvents = domElement\n    }\n\n    this.stopListenToKeyEvents = (): void => {\n      this._domElementKeyEvents.removeEventListener('keydown', onKeyDown)\n      this._domElementKeyEvents = null\n    }\n\n    this.saveState = (): void => {\n      scope.target0.copy(scope.target)\n      scope.position0.copy(scope.object.position)\n      scope.zoom0 = scope.object.zoom\n    }\n\n    this.reset = (): void => {\n      scope.target.copy(scope.target0)\n      scope.object.position.copy(scope.position0)\n      scope.object.zoom = scope.zoom0\n      scope.object.updateProjectionMatrix()\n\n      // @ts-ignore\n      scope.dispatchEvent(changeEvent)\n\n      scope.update()\n\n      state = STATE.NONE\n    }\n\n    // this method is exposed, but perhaps it would be better if we can make it private...\n    this.update = ((): (() => void) => {\n      const offset = new Vector3()\n      const up = new Vector3(0, 1, 0)\n\n      // so camera.up is the orbit axis\n      const quat = new Quaternion().setFromUnitVectors(object.up, up)\n      const quatInverse = quat.clone().invert()\n\n      const lastPosition = new Vector3()\n      const lastQuaternion = new Quaternion()\n\n      const twoPI = 2 * Math.PI\n\n      return function update(): boolean {\n        const position = scope.object.position\n\n        // update new up direction\n        quat.setFromUnitVectors(object.up, up)\n        quatInverse.copy(quat).invert()\n\n        offset.copy(position).sub(scope.target)\n\n        // rotate offset to \"y-axis-is-up\" space\n        offset.applyQuaternion(quat)\n\n        // angle from z-axis around y-axis\n        spherical.setFromVector3(offset)\n\n        if (scope.autoRotate && state === STATE.NONE) {\n          rotateLeft(getAutoRotationAngle())\n        }\n\n        if (scope.enableDamping) {\n          spherical.theta += sphericalDelta.theta * scope.dampingFactor\n          spherical.phi += sphericalDelta.phi * scope.dampingFactor\n        } else {\n          spherical.theta += sphericalDelta.theta\n          spherical.phi += sphericalDelta.phi\n        }\n\n        // restrict theta to be between desired limits\n\n        let min = scope.minAzimuthAngle\n        let max = scope.maxAzimuthAngle\n\n        if (isFinite(min) && isFinite(max)) {\n          if (min < -Math.PI) min += twoPI\n          else if (min > Math.PI) min -= twoPI\n\n          if (max < -Math.PI) max += twoPI\n          else if (max > Math.PI) max -= twoPI\n\n          if (min <= max) {\n            spherical.theta = Math.max(min, Math.min(max, spherical.theta))\n          } else {\n            spherical.theta =\n              spherical.theta > (min + max) / 2 ? Math.max(min, spherical.theta) : Math.min(max, spherical.theta)\n          }\n        }\n\n        // restrict phi to be between desired limits\n        spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi))\n        spherical.makeSafe()\n\n        // move target to panned location\n\n        if (scope.enableDamping === true) {\n          scope.target.addScaledVector(panOffset, scope.dampingFactor)\n        } else {\n          scope.target.add(panOffset)\n        }\n\n        // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\n        // we adjust zoom later in these cases\n        if ((scope.zoomToCursor && performCursorZoom) || (scope.object as OrthographicCamera).isOrthographicCamera) {\n          spherical.radius = clampDistance(spherical.radius)\n        } else {\n          spherical.radius = clampDistance(spherical.radius * scale)\n        }\n\n        offset.setFromSpherical(spherical)\n\n        // rotate offset back to \"camera-up-vector-is-up\" space\n        offset.applyQuaternion(quatInverse)\n\n        position.copy(scope.target).add(offset)\n\n        if (!scope.object.matrixAutoUpdate) scope.object.updateMatrix()\n        scope.object.lookAt(scope.target)\n\n        if (scope.enableDamping === true) {\n          sphericalDelta.theta *= 1 - scope.dampingFactor\n          sphericalDelta.phi *= 1 - scope.dampingFactor\n\n          panOffset.multiplyScalar(1 - scope.dampingFactor)\n        } else {\n          sphericalDelta.set(0, 0, 0)\n\n          panOffset.set(0, 0, 0)\n        }\n\n        // adjust camera position\n        let zoomChanged = false\n        if (scope.zoomToCursor && performCursorZoom) {\n          let newRadius = null\n          if (scope.object instanceof PerspectiveCamera && scope.object.isPerspectiveCamera) {\n            // move the camera down the pointer ray\n            // this method avoids floating point error\n            const prevRadius = offset.length()\n            newRadius = clampDistance(prevRadius * scale)\n\n            const radiusDelta = prevRadius - newRadius\n            scope.object.position.addScaledVector(dollyDirection, radiusDelta)\n            scope.object.updateMatrixWorld()\n          } else if ((scope.object as OrthographicCamera).isOrthographicCamera) {\n            // adjust the ortho camera position based on zoom changes\n            const mouseBefore = new Vector3(mouse.x, mouse.y, 0)\n            mouseBefore.unproject(scope.object)\n\n            scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / scale))\n            scope.object.updateProjectionMatrix()\n            zoomChanged = true\n\n            const mouseAfter = new Vector3(mouse.x, mouse.y, 0)\n            mouseAfter.unproject(scope.object)\n\n            scope.object.position.sub(mouseAfter).add(mouseBefore)\n            scope.object.updateMatrixWorld()\n\n            newRadius = offset.length()\n          } else {\n            console.warn('WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.')\n            scope.zoomToCursor = false\n          }\n\n          // handle the placement of the target\n          if (newRadius !== null) {\n            if (scope.screenSpacePanning) {\n              // position the orbit target in front of the new camera position\n              scope.target\n                .set(0, 0, -1)\n                .transformDirection(scope.object.matrix)\n                .multiplyScalar(newRadius)\n                .add(scope.object.position)\n            } else {\n              // get the ray and translation plane to compute target\n              _ray.origin.copy(scope.object.position)\n              _ray.direction.set(0, 0, -1).transformDirection(scope.object.matrix)\n\n              // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\n              // extremely large values\n              if (Math.abs(scope.object.up.dot(_ray.direction)) < TILT_LIMIT) {\n                object.lookAt(scope.target)\n              } else {\n                _plane.setFromNormalAndCoplanarPoint(scope.object.up, scope.target)\n                _ray.intersectPlane(_plane, scope.target)\n              }\n            }\n          }\n        } else if (scope.object instanceof OrthographicCamera && scope.object.isOrthographicCamera) {\n          zoomChanged = scale !== 1\n\n          if (zoomChanged) {\n            scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / scale))\n            scope.object.updateProjectionMatrix()\n          }\n        }\n\n        scale = 1\n        performCursorZoom = false\n\n        // update condition is:\n        // min(camera displacement, camera rotation in radians)^2 > EPS\n        // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n        if (\n          zoomChanged ||\n          lastPosition.distanceToSquared(scope.object.position) > EPS ||\n          8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS\n        ) {\n          // @ts-ignore\n          scope.dispatchEvent(changeEvent)\n\n          lastPosition.copy(scope.object.position)\n          lastQuaternion.copy(scope.object.quaternion)\n          zoomChanged = false\n\n          return true\n        }\n\n        return false\n      }\n    })()\n\n    // https://github.com/mrdoob/three.js/issues/20575\n    this.connect = (domElement: HTMLElement): void => {\n      scope.domElement = domElement\n      // disables touch scroll\n      // touch-action needs to be defined for pointer events to work on mobile\n      // https://stackoverflow.com/a/48254578\n      scope.domElement.style.touchAction = 'none'\n      scope.domElement.addEventListener('contextmenu', onContextMenu)\n      scope.domElement.addEventListener('pointerdown', onPointerDown)\n      scope.domElement.addEventListener('pointercancel', onPointerUp)\n      scope.domElement.addEventListener('wheel', onMouseWheel)\n    }\n\n    this.dispose = (): void => {\n      // Enabling touch scroll\n      if (scope.domElement) {\n        scope.domElement.style.touchAction = 'auto'\n      }\n      scope.domElement?.removeEventListener('contextmenu', onContextMenu)\n      scope.domElement?.removeEventListener('pointerdown', onPointerDown)\n      scope.domElement?.removeEventListener('pointercancel', onPointerUp)\n      scope.domElement?.removeEventListener('wheel', onMouseWheel)\n      scope.domElement?.ownerDocument.removeEventListener('pointermove', onPointerMove)\n      scope.domElement?.ownerDocument.removeEventListener('pointerup', onPointerUp)\n      if (scope._domElementKeyEvents !== null) {\n        scope._domElementKeyEvents.removeEventListener('keydown', onKeyDown)\n      }\n      //scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n    }\n\n    //\n    // internals\n    //\n\n    const scope = this\n\n    const changeEvent = { type: 'change' }\n    const startEvent = { type: 'start' }\n    const endEvent = { type: 'end' }\n\n    const STATE = {\n      NONE: -1,\n      ROTATE: 0,\n      DOLLY: 1,\n      PAN: 2,\n      TOUCH_ROTATE: 3,\n      TOUCH_PAN: 4,\n      TOUCH_DOLLY_PAN: 5,\n      TOUCH_DOLLY_ROTATE: 6,\n    }\n\n    let state = STATE.NONE\n\n    const EPS = 0.000001\n\n    // current position in spherical coordinates\n    const spherical = new Spherical()\n    const sphericalDelta = new Spherical()\n\n    let scale = 1\n    const panOffset = new Vector3()\n\n    const rotateStart = new Vector2()\n    const rotateEnd = new Vector2()\n    const rotateDelta = new Vector2()\n\n    const panStart = new Vector2()\n    const panEnd = new Vector2()\n    const panDelta = new Vector2()\n\n    const dollyStart = new Vector2()\n    const dollyEnd = new Vector2()\n    const dollyDelta = new Vector2()\n\n    const dollyDirection = new Vector3()\n    const mouse = new Vector2()\n    let performCursorZoom = false\n\n    const pointers: PointerEvent[] = []\n    const pointerPositions: { [key: string]: Vector2 } = {}\n\n    function getAutoRotationAngle(): number {\n      return ((2 * Math.PI) / 60 / 60) * scope.autoRotateSpeed\n    }\n\n    function getZoomScale(): number {\n      return Math.pow(0.95, scope.zoomSpeed)\n    }\n\n    function rotateLeft(angle: number): void {\n      if (scope.reverseOrbit || scope.reverseHorizontalOrbit) {\n        sphericalDelta.theta += angle\n      } else {\n        sphericalDelta.theta -= angle\n      }\n    }\n\n    function rotateUp(angle: number): void {\n      if (scope.reverseOrbit || scope.reverseVerticalOrbit) {\n        sphericalDelta.phi += angle\n      } else {\n        sphericalDelta.phi -= angle\n      }\n    }\n\n    const panLeft = (() => {\n      const v = new Vector3()\n\n      return function panLeft(distance: number, objectMatrix: Matrix4) {\n        v.setFromMatrixColumn(objectMatrix, 0) // get X column of objectMatrix\n        v.multiplyScalar(-distance)\n\n        panOffset.add(v)\n      }\n    })()\n\n    const panUp = (() => {\n      const v = new Vector3()\n\n      return function panUp(distance: number, objectMatrix: Matrix4) {\n        if (scope.screenSpacePanning === true) {\n          v.setFromMatrixColumn(objectMatrix, 1)\n        } else {\n          v.setFromMatrixColumn(objectMatrix, 0)\n          v.crossVectors(scope.object.up, v)\n        }\n\n        v.multiplyScalar(distance)\n\n        panOffset.add(v)\n      }\n    })()\n\n    // deltaX and deltaY are in pixels; right and down are positive\n    const pan = (() => {\n      const offset = new Vector3()\n\n      return function pan(deltaX: number, deltaY: number) {\n        const element = scope.domElement\n\n        if (element && scope.object instanceof PerspectiveCamera && scope.object.isPerspectiveCamera) {\n          // perspective\n          const position = scope.object.position\n          offset.copy(position).sub(scope.target)\n          let targetDistance = offset.length()\n\n          // half of the fov is center to top of screen\n          targetDistance *= Math.tan(((scope.object.fov / 2) * Math.PI) / 180.0)\n\n          // we use only clientHeight here so aspect ratio does not distort speed\n          panLeft((2 * deltaX * targetDistance) / element.clientHeight, scope.object.matrix)\n          panUp((2 * deltaY * targetDistance) / element.clientHeight, scope.object.matrix)\n        } else if (element && scope.object instanceof OrthographicCamera && scope.object.isOrthographicCamera) {\n          // orthographic\n          panLeft(\n            (deltaX * (scope.object.right - scope.object.left)) / scope.object.zoom / element.clientWidth,\n            scope.object.matrix,\n          )\n          panUp(\n            (deltaY * (scope.object.top - scope.object.bottom)) / scope.object.zoom / element.clientHeight,\n            scope.object.matrix,\n          )\n        } else {\n          // camera neither orthographic nor perspective\n          console.warn('WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.')\n          scope.enablePan = false\n        }\n      }\n    })()\n\n    function setScale(newScale: number) {\n      if (\n        (scope.object instanceof PerspectiveCamera && scope.object.isPerspectiveCamera) ||\n        (scope.object instanceof OrthographicCamera && scope.object.isOrthographicCamera)\n      ) {\n        scale = newScale\n      } else {\n        console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.')\n        scope.enableZoom = false\n      }\n    }\n\n    function dollyOut(dollyScale: number) {\n      setScale(scale / dollyScale)\n    }\n\n    function dollyIn(dollyScale: number) {\n      setScale(scale * dollyScale)\n    }\n\n    function updateMouseParameters(event: MouseEvent): void {\n      if (!scope.zoomToCursor || !scope.domElement) {\n        return\n      }\n\n      performCursorZoom = true\n\n      const rect = scope.domElement.getBoundingClientRect()\n      const x = event.clientX - rect.left\n      const y = event.clientY - rect.top\n      const w = rect.width\n      const h = rect.height\n\n      mouse.x = (x / w) * 2 - 1\n      mouse.y = -(y / h) * 2 + 1\n\n      dollyDirection.set(mouse.x, mouse.y, 1).unproject(scope.object).sub(scope.object.position).normalize()\n    }\n\n    function clampDistance(dist: number): number {\n      return Math.max(scope.minDistance, Math.min(scope.maxDistance, dist))\n    }\n\n    //\n    // event callbacks - update the object state\n    //\n\n    function handleMouseDownRotate(event: MouseEvent) {\n      rotateStart.set(event.clientX, event.clientY)\n    }\n\n    function handleMouseDownDolly(event: MouseEvent) {\n      updateMouseParameters(event)\n      dollyStart.set(event.clientX, event.clientY)\n    }\n\n    function handleMouseDownPan(event: MouseEvent) {\n      panStart.set(event.clientX, event.clientY)\n    }\n\n    function handleMouseMoveRotate(event: MouseEvent) {\n      rotateEnd.set(event.clientX, event.clientY)\n      rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed)\n\n      const element = scope.domElement\n\n      if (element) {\n        rotateLeft((2 * Math.PI * rotateDelta.x) / element.clientHeight) // yes, height\n        rotateUp((2 * Math.PI * rotateDelta.y) / element.clientHeight)\n      }\n      rotateStart.copy(rotateEnd)\n      scope.update()\n    }\n\n    function handleMouseMoveDolly(event: MouseEvent) {\n      dollyEnd.set(event.clientX, event.clientY)\n      dollyDelta.subVectors(dollyEnd, dollyStart)\n\n      if (dollyDelta.y > 0) {\n        dollyOut(getZoomScale())\n      } else if (dollyDelta.y < 0) {\n        dollyIn(getZoomScale())\n      }\n\n      dollyStart.copy(dollyEnd)\n      scope.update()\n    }\n\n    function handleMouseMovePan(event: MouseEvent) {\n      panEnd.set(event.clientX, event.clientY)\n      panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed)\n      pan(panDelta.x, panDelta.y)\n      panStart.copy(panEnd)\n      scope.update()\n    }\n\n    function handleMouseWheel(event: WheelEvent) {\n      updateMouseParameters(event)\n\n      if (event.deltaY < 0) {\n        dollyIn(getZoomScale())\n      } else if (event.deltaY > 0) {\n        dollyOut(getZoomScale())\n      }\n\n      scope.update()\n    }\n\n    function handleKeyDown(event: KeyboardEvent) {\n      let needsUpdate = false\n\n      switch (event.code) {\n        case scope.keys.UP:\n          pan(0, scope.keyPanSpeed)\n          needsUpdate = true\n          break\n\n        case scope.keys.BOTTOM:\n          pan(0, -scope.keyPanSpeed)\n          needsUpdate = true\n          break\n\n        case scope.keys.LEFT:\n          pan(scope.keyPanSpeed, 0)\n          needsUpdate = true\n          break\n\n        case scope.keys.RIGHT:\n          pan(-scope.keyPanSpeed, 0)\n          needsUpdate = true\n          break\n      }\n\n      if (needsUpdate) {\n        // prevent the browser from scrolling on cursor keys\n        event.preventDefault()\n        scope.update()\n      }\n    }\n\n    function handleTouchStartRotate() {\n      if (pointers.length == 1) {\n        rotateStart.set(pointers[0].pageX, pointers[0].pageY)\n      } else {\n        const x = 0.5 * (pointers[0].pageX + pointers[1].pageX)\n        const y = 0.5 * (pointers[0].pageY + pointers[1].pageY)\n\n        rotateStart.set(x, y)\n      }\n    }\n\n    function handleTouchStartPan() {\n      if (pointers.length == 1) {\n        panStart.set(pointers[0].pageX, pointers[0].pageY)\n      } else {\n        const x = 0.5 * (pointers[0].pageX + pointers[1].pageX)\n        const y = 0.5 * (pointers[0].pageY + pointers[1].pageY)\n\n        panStart.set(x, y)\n      }\n    }\n\n    function handleTouchStartDolly() {\n      const dx = pointers[0].pageX - pointers[1].pageX\n      const dy = pointers[0].pageY - pointers[1].pageY\n      const distance = Math.sqrt(dx * dx + dy * dy)\n\n      dollyStart.set(0, distance)\n    }\n\n    function handleTouchStartDollyPan() {\n      if (scope.enableZoom) handleTouchStartDolly()\n      if (scope.enablePan) handleTouchStartPan()\n    }\n\n    function handleTouchStartDollyRotate() {\n      if (scope.enableZoom) handleTouchStartDolly()\n      if (scope.enableRotate) handleTouchStartRotate()\n    }\n\n    function handleTouchMoveRotate(event: PointerEvent) {\n      if (pointers.length == 1) {\n        rotateEnd.set(event.pageX, event.pageY)\n      } else {\n        const position = getSecondPointerPosition(event)\n        const x = 0.5 * (event.pageX + position.x)\n        const y = 0.5 * (event.pageY + position.y)\n        rotateEnd.set(x, y)\n      }\n\n      rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed)\n\n      const element = scope.domElement\n\n      if (element) {\n        rotateLeft((2 * Math.PI * rotateDelta.x) / element.clientHeight) // yes, height\n        rotateUp((2 * Math.PI * rotateDelta.y) / element.clientHeight)\n      }\n      rotateStart.copy(rotateEnd)\n    }\n\n    function handleTouchMovePan(event: PointerEvent) {\n      if (pointers.length == 1) {\n        panEnd.set(event.pageX, event.pageY)\n      } else {\n        const position = getSecondPointerPosition(event)\n        const x = 0.5 * (event.pageX + position.x)\n        const y = 0.5 * (event.pageY + position.y)\n        panEnd.set(x, y)\n      }\n\n      panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed)\n      pan(panDelta.x, panDelta.y)\n      panStart.copy(panEnd)\n    }\n\n    function handleTouchMoveDolly(event: PointerEvent) {\n      const position = getSecondPointerPosition(event)\n      const dx = event.pageX - position.x\n      const dy = event.pageY - position.y\n      const distance = Math.sqrt(dx * dx + dy * dy)\n\n      dollyEnd.set(0, distance)\n      dollyDelta.set(0, Math.pow(dollyEnd.y / dollyStart.y, scope.zoomSpeed))\n      dollyOut(dollyDelta.y)\n      dollyStart.copy(dollyEnd)\n    }\n\n    function handleTouchMoveDollyPan(event: PointerEvent) {\n      if (scope.enableZoom) handleTouchMoveDolly(event)\n      if (scope.enablePan) handleTouchMovePan(event)\n    }\n\n    function handleTouchMoveDollyRotate(event: PointerEvent) {\n      if (scope.enableZoom) handleTouchMoveDolly(event)\n      if (scope.enableRotate) handleTouchMoveRotate(event)\n    }\n\n    //\n    // event handlers - FSM: listen for events and reset state\n    //\n\n    function onPointerDown(event: PointerEvent) {\n      if (scope.enabled === false) return\n\n      if (pointers.length === 0) {\n        scope.domElement?.ownerDocument.addEventListener('pointermove', onPointerMove)\n        scope.domElement?.ownerDocument.addEventListener('pointerup', onPointerUp)\n      }\n\n      addPointer(event)\n\n      if (event.pointerType === 'touch') {\n        onTouchStart(event)\n      } else {\n        onMouseDown(event)\n      }\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      if (scope.enabled === false) return\n\n      if (event.pointerType === 'touch') {\n        onTouchMove(event)\n      } else {\n        onMouseMove(event)\n      }\n    }\n\n    function onPointerUp(event: PointerEvent) {\n      removePointer(event)\n\n      if (pointers.length === 0) {\n        scope.domElement?.releasePointerCapture(event.pointerId)\n\n        scope.domElement?.ownerDocument.removeEventListener('pointermove', onPointerMove)\n        scope.domElement?.ownerDocument.removeEventListener('pointerup', onPointerUp)\n      }\n\n      // @ts-ignore\n      scope.dispatchEvent(endEvent)\n\n      state = STATE.NONE\n    }\n\n    function onMouseDown(event: MouseEvent) {\n      let mouseAction\n\n      switch (event.button) {\n        case 0:\n          mouseAction = scope.mouseButtons.LEFT\n          break\n\n        case 1:\n          mouseAction = scope.mouseButtons.MIDDLE\n          break\n\n        case 2:\n          mouseAction = scope.mouseButtons.RIGHT\n          break\n\n        default:\n          mouseAction = -1\n      }\n\n      switch (mouseAction) {\n        case MOUSE.DOLLY:\n          if (scope.enableZoom === false) return\n          handleMouseDownDolly(event)\n          state = STATE.DOLLY\n          break\n\n        case MOUSE.ROTATE:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            if (scope.enablePan === false) return\n            handleMouseDownPan(event)\n            state = STATE.PAN\n          } else {\n            if (scope.enableRotate === false) return\n            handleMouseDownRotate(event)\n            state = STATE.ROTATE\n          }\n          break\n\n        case MOUSE.PAN:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            if (scope.enableRotate === false) return\n            handleMouseDownRotate(event)\n            state = STATE.ROTATE\n          } else {\n            if (scope.enablePan === false) return\n            handleMouseDownPan(event)\n            state = STATE.PAN\n          }\n          break\n\n        default:\n          state = STATE.NONE\n      }\n\n      if (state !== STATE.NONE) {\n        // @ts-ignore\n        scope.dispatchEvent(startEvent)\n      }\n    }\n\n    function onMouseMove(event: MouseEvent) {\n      if (scope.enabled === false) return\n\n      switch (state) {\n        case STATE.ROTATE:\n          if (scope.enableRotate === false) return\n          handleMouseMoveRotate(event)\n          break\n\n        case STATE.DOLLY:\n          if (scope.enableZoom === false) return\n          handleMouseMoveDolly(event)\n          break\n\n        case STATE.PAN:\n          if (scope.enablePan === false) return\n          handleMouseMovePan(event)\n          break\n      }\n    }\n\n    function onMouseWheel(event: WheelEvent) {\n      if (scope.enabled === false || scope.enableZoom === false || (state !== STATE.NONE && state !== STATE.ROTATE)) {\n        return\n      }\n\n      event.preventDefault()\n\n      // @ts-ignore\n      scope.dispatchEvent(startEvent)\n\n      handleMouseWheel(event)\n\n      // @ts-ignore\n      scope.dispatchEvent(endEvent)\n    }\n\n    function onKeyDown(event: KeyboardEvent) {\n      if (scope.enabled === false || scope.enablePan === false) return\n      handleKeyDown(event)\n    }\n\n    function onTouchStart(event: PointerEvent) {\n      trackPointer(event)\n\n      switch (pointers.length) {\n        case 1:\n          switch (scope.touches.ONE) {\n            case TOUCH.ROTATE:\n              if (scope.enableRotate === false) return\n              handleTouchStartRotate()\n              state = STATE.TOUCH_ROTATE\n              break\n\n            case TOUCH.PAN:\n              if (scope.enablePan === false) return\n              handleTouchStartPan()\n              state = STATE.TOUCH_PAN\n              break\n\n            default:\n              state = STATE.NONE\n          }\n\n          break\n\n        case 2:\n          switch (scope.touches.TWO) {\n            case TOUCH.DOLLY_PAN:\n              if (scope.enableZoom === false && scope.enablePan === false) return\n              handleTouchStartDollyPan()\n              state = STATE.TOUCH_DOLLY_PAN\n              break\n\n            case TOUCH.DOLLY_ROTATE:\n              if (scope.enableZoom === false && scope.enableRotate === false) return\n              handleTouchStartDollyRotate()\n              state = STATE.TOUCH_DOLLY_ROTATE\n              break\n\n            default:\n              state = STATE.NONE\n          }\n\n          break\n\n        default:\n          state = STATE.NONE\n      }\n\n      if (state !== STATE.NONE) {\n        // @ts-ignore\n        scope.dispatchEvent(startEvent)\n      }\n    }\n\n    function onTouchMove(event: PointerEvent) {\n      trackPointer(event)\n\n      switch (state) {\n        case STATE.TOUCH_ROTATE:\n          if (scope.enableRotate === false) return\n          handleTouchMoveRotate(event)\n          scope.update()\n          break\n\n        case STATE.TOUCH_PAN:\n          if (scope.enablePan === false) return\n          handleTouchMovePan(event)\n          scope.update()\n          break\n\n        case STATE.TOUCH_DOLLY_PAN:\n          if (scope.enableZoom === false && scope.enablePan === false) return\n          handleTouchMoveDollyPan(event)\n          scope.update()\n          break\n\n        case STATE.TOUCH_DOLLY_ROTATE:\n          if (scope.enableZoom === false && scope.enableRotate === false) return\n          handleTouchMoveDollyRotate(event)\n          scope.update()\n          break\n\n        default:\n          state = STATE.NONE\n      }\n    }\n\n    function onContextMenu(event: Event) {\n      if (scope.enabled === false) return\n      event.preventDefault()\n    }\n\n    function addPointer(event: PointerEvent) {\n      pointers.push(event)\n    }\n\n    function removePointer(event: PointerEvent) {\n      delete pointerPositions[event.pointerId]\n\n      for (let i = 0; i < pointers.length; i++) {\n        if (pointers[i].pointerId == event.pointerId) {\n          pointers.splice(i, 1)\n          return\n        }\n      }\n    }\n\n    function trackPointer(event: PointerEvent) {\n      let position = pointerPositions[event.pointerId]\n\n      if (position === undefined) {\n        position = new Vector2()\n        pointerPositions[event.pointerId] = position\n      }\n\n      position.set(event.pageX, event.pageY)\n    }\n\n    function getSecondPointerPosition(event: PointerEvent) {\n      const pointer = event.pointerId === pointers[0].pointerId ? pointers[1] : pointers[0]\n      return pointerPositions[pointer.pointerId]\n    }\n\n    // Add dolly in/out methods for public API\n\n    this.dollyIn = (dollyScale = getZoomScale()) => {\n      dollyIn(dollyScale)\n      scope.update()\n    }\n\n    this.dollyOut = (dollyScale = getZoomScale()) => {\n      dollyOut(dollyScale)\n      scope.update()\n    }\n\n    this.getScale = () => {\n      return scale\n    }\n\n    this.setScale = (newScale) => {\n      setScale(newScale)\n      scope.update()\n    }\n\n    this.getZoomScale = () => {\n      return getZoomScale()\n    }\n\n    // connect events\n    if (domElement !== undefined) this.connect(domElement)\n    // force an update at start\n    this.update()\n  }\n}\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n// This is very similar to OrbitControls, another set of touch behavior\n//\n//    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - left mouse, or arrow keys / touch: one-finger move\n\nclass MapControls extends OrbitControls {\n  constructor(object: PerspectiveCamera | OrthographicCamera, domElement?: HTMLElement) {\n    super(object, domElement)\n\n    this.screenSpacePanning = false // pan orthogonal to world-space direction camera.up\n\n    this.mouseButtons.LEFT = MOUSE.PAN\n    this.mouseButtons.RIGHT = MOUSE.ROTATE\n\n    this.touches.ONE = TOUCH.PAN\n    this.touches.TWO = TOUCH.DOLLY_ROTATE\n  }\n}\n\nexport { OrbitControls, MapControls }\n"],"names":["domElement","panLeft","panUp","pan"],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 954, "column": 0}, "map": {"version":3,"file":"TransformControls.js","sources":["file:///project/sandbox/user-workspace/node_modules/src/controls/TransformControls.ts"],"sourcesContent":["import {\n  BoxGeometry,\n  BufferGeometry,\n  Color,\n  CylinderGeometry,\n  DoubleSide,\n  Euler,\n  Float32BufferAttribute,\n  Line,\n  LineBasicMaterial,\n  Material,\n  Matrix4,\n  Mesh,\n  MeshBasicMaterial,\n  Object3D,\n  OctahedronGeometry,\n  OrthographicCamera,\n  PerspectiveCamera,\n  PlaneGeometry,\n  Quaternion,\n  Raycaster,\n  SphereGeometry,\n  Intersection,\n  TorusGeometry,\n  Vector3,\n  Camera,\n  Vector2,\n} from 'three'\n\nexport interface TransformControlsPointerObject {\n  x: number\n  y: number\n  button: number\n}\n\nclass TransformControls<TCamera extends Camera = Camera> extends Object3D {\n  public readonly isTransformControls = true\n\n  public visible = false\n\n  private domElement: HTMLElement | undefined\n\n  private raycaster = new Raycaster()\n\n  private gizmo: TransformControlsGizmo\n  private plane: TransformControlsPlane\n\n  private tempVector = new Vector3()\n  private tempVector2 = new Vector3()\n  private tempQuaternion = new Quaternion()\n  private unit = {\n    X: new Vector3(1, 0, 0),\n    Y: new Vector3(0, 1, 0),\n    Z: new Vector3(0, 0, 1),\n  }\n\n  private pointStart = new Vector3()\n  private pointEnd = new Vector3()\n  private offset = new Vector3()\n  private rotationAxis = new Vector3()\n  private startNorm = new Vector3()\n  private endNorm = new Vector3()\n  private rotationAngle = 0\n\n  private cameraPosition = new Vector3()\n  private cameraQuaternion = new Quaternion()\n  private cameraScale = new Vector3()\n\n  private parentPosition = new Vector3()\n  private parentQuaternion = new Quaternion()\n  private parentQuaternionInv = new Quaternion()\n  private parentScale = new Vector3()\n\n  private worldPositionStart = new Vector3()\n  private worldQuaternionStart = new Quaternion()\n  private worldScaleStart = new Vector3()\n\n  private worldPosition = new Vector3()\n  private worldQuaternion = new Quaternion()\n  private worldQuaternionInv = new Quaternion()\n  private worldScale = new Vector3()\n\n  private eye = new Vector3()\n\n  private positionStart = new Vector3()\n  private quaternionStart = new Quaternion()\n  private scaleStart = new Vector3()\n\n  private camera: TCamera\n  private object: Object3D | undefined\n  private enabled = true\n  private axis: string | null = null\n  private mode: 'translate' | 'rotate' | 'scale' = 'translate'\n  private translationSnap: number | null = null\n  private rotationSnap: number | null = null\n  private scaleSnap: number | null = null\n  private space = 'world'\n  private size = 1\n  private dragging = false\n  private showX = true\n  private showY = true\n  private showZ = true\n\n  // events\n  private changeEvent = { type: 'change' }\n  private mouseDownEvent = { type: 'mouseDown', mode: this.mode }\n  private mouseUpEvent = { type: 'mouseUp', mode: this.mode }\n  private objectChangeEvent = { type: 'objectChange' }\n\n  constructor(camera: TCamera, domElement: HTMLElement | undefined) {\n    super()\n\n    this.domElement = domElement\n    this.camera = camera\n\n    this.gizmo = new TransformControlsGizmo()\n    this.add(this.gizmo)\n\n    this.plane = new TransformControlsPlane()\n    this.add(this.plane)\n\n    // Defined getter, setter and store for a property\n    const defineProperty = <TValue>(propName: string, defaultValue: TValue): void => {\n      let propValue = defaultValue\n\n      Object.defineProperty(this, propName, {\n        get: function () {\n          return propValue !== undefined ? propValue : defaultValue\n        },\n\n        set: function (value) {\n          if (propValue !== value) {\n            propValue = value\n            this.plane[propName] = value\n            this.gizmo[propName] = value\n\n            this.dispatchEvent({ type: propName + '-changed', value: value })\n            this.dispatchEvent(this.changeEvent)\n          }\n        },\n      })\n\n      //@ts-ignore\n      this[propName] = defaultValue\n      // @ts-ignore\n      this.plane[propName] = defaultValue\n      // @ts-ignore\n      this.gizmo[propName] = defaultValue\n    }\n\n    defineProperty('camera', this.camera)\n    defineProperty('object', this.object)\n    defineProperty('enabled', this.enabled)\n    defineProperty('axis', this.axis)\n    defineProperty('mode', this.mode)\n    defineProperty('translationSnap', this.translationSnap)\n    defineProperty('rotationSnap', this.rotationSnap)\n    defineProperty('scaleSnap', this.scaleSnap)\n    defineProperty('space', this.space)\n    defineProperty('size', this.size)\n    defineProperty('dragging', this.dragging)\n    defineProperty('showX', this.showX)\n    defineProperty('showY', this.showY)\n    defineProperty('showZ', this.showZ)\n    defineProperty('worldPosition', this.worldPosition)\n    defineProperty('worldPositionStart', this.worldPositionStart)\n    defineProperty('worldQuaternion', this.worldQuaternion)\n    defineProperty('worldQuaternionStart', this.worldQuaternionStart)\n    defineProperty('cameraPosition', this.cameraPosition)\n    defineProperty('cameraQuaternion', this.cameraQuaternion)\n    defineProperty('pointStart', this.pointStart)\n    defineProperty('pointEnd', this.pointEnd)\n    defineProperty('rotationAxis', this.rotationAxis)\n    defineProperty('rotationAngle', this.rotationAngle)\n    defineProperty('eye', this.eye)\n\n    // connect events\n    if (domElement !== undefined) this.connect(domElement)\n  }\n\n  private intersectObjectWithRay = (\n    object: Object3D,\n    raycaster: Raycaster,\n    includeInvisible?: boolean,\n  ): false | Intersection => {\n    const allIntersections = raycaster.intersectObject(object, true)\n\n    for (let i = 0; i < allIntersections.length; i++) {\n      if (allIntersections[i].object.visible || includeInvisible) {\n        return allIntersections[i]\n      }\n    }\n\n    return false\n  }\n\n  // Set current object\n  public attach = (object: Object3D): this => {\n    this.object = object\n    this.visible = true\n\n    return this\n  }\n\n  // Detatch from object\n  public detach = (): this => {\n    this.object = undefined\n    this.visible = false\n    this.axis = null\n\n    return this\n  }\n\n  // Reset\n  public reset = (): this => {\n    if (!this.enabled) return this\n\n    if (this.dragging) {\n      if (this.object !== undefined) {\n        this.object.position.copy(this.positionStart)\n        this.object.quaternion.copy(this.quaternionStart)\n        this.object.scale.copy(this.scaleStart)\n        // @ts-ignore\n        this.dispatchEvent(this.changeEvent)\n        // @ts-ignore\n        this.dispatchEvent(this.objectChangeEvent)\n        this.pointStart.copy(this.pointEnd)\n      }\n    }\n\n    return this\n  }\n\n  public updateMatrixWorld = (): void => {\n    if (this.object !== undefined) {\n      this.object.updateMatrixWorld()\n\n      if (this.object.parent === null) {\n        console.error('TransformControls: The attached 3D object must be a part of the scene graph.')\n      } else {\n        this.object.parent.matrixWorld.decompose(this.parentPosition, this.parentQuaternion, this.parentScale)\n      }\n\n      this.object.matrixWorld.decompose(this.worldPosition, this.worldQuaternion, this.worldScale)\n\n      this.parentQuaternionInv.copy(this.parentQuaternion).invert()\n      this.worldQuaternionInv.copy(this.worldQuaternion).invert()\n    }\n\n    this.camera.updateMatrixWorld()\n    this.camera.matrixWorld.decompose(this.cameraPosition, this.cameraQuaternion, this.cameraScale)\n\n    this.eye.copy(this.cameraPosition).sub(this.worldPosition).normalize()\n\n    super.updateMatrixWorld()\n  }\n\n  private pointerHover = (pointer: TransformControlsPointerObject): void => {\n    if (this.object === undefined || this.dragging === true) return\n\n    this.raycaster.setFromCamera((pointer as unknown) as Vector2, this.camera)\n\n    const intersect = this.intersectObjectWithRay(this.gizmo.picker[this.mode], this.raycaster)\n\n    if (intersect) {\n      this.axis = intersect.object.name\n    } else {\n      this.axis = null\n    }\n  }\n\n  private pointerDown = (pointer: TransformControlsPointerObject): void => {\n    if (this.object === undefined || this.dragging === true || pointer.button !== 0) return\n\n    if (this.axis !== null) {\n      this.raycaster.setFromCamera((pointer as unknown) as Vector2, this.camera)\n\n      const planeIntersect = this.intersectObjectWithRay(this.plane, this.raycaster, true)\n\n      if (planeIntersect) {\n        let space = this.space\n\n        if (this.mode === 'scale') {\n          space = 'local'\n        } else if (this.axis === 'E' || this.axis === 'XYZE' || this.axis === 'XYZ') {\n          space = 'world'\n        }\n\n        if (space === 'local' && this.mode === 'rotate') {\n          const snap = this.rotationSnap\n\n          if (this.axis === 'X' && snap) this.object.rotation.x = Math.round(this.object.rotation.x / snap) * snap\n          if (this.axis === 'Y' && snap) this.object.rotation.y = Math.round(this.object.rotation.y / snap) * snap\n          if (this.axis === 'Z' && snap) this.object.rotation.z = Math.round(this.object.rotation.z / snap) * snap\n        }\n\n        this.object.updateMatrixWorld()\n\n        if (this.object.parent) {\n          this.object.parent.updateMatrixWorld()\n        }\n\n        this.positionStart.copy(this.object.position)\n        this.quaternionStart.copy(this.object.quaternion)\n        this.scaleStart.copy(this.object.scale)\n\n        this.object.matrixWorld.decompose(this.worldPositionStart, this.worldQuaternionStart, this.worldScaleStart)\n\n        this.pointStart.copy(planeIntersect.point).sub(this.worldPositionStart)\n      }\n\n      this.dragging = true\n      this.mouseDownEvent.mode = this.mode\n      // @ts-ignore\n      this.dispatchEvent(this.mouseDownEvent)\n    }\n  }\n\n  private pointerMove = (pointer: TransformControlsPointerObject): void => {\n    const axis = this.axis\n    const mode = this.mode\n    const object = this.object\n    let space = this.space\n\n    if (mode === 'scale') {\n      space = 'local'\n    } else if (axis === 'E' || axis === 'XYZE' || axis === 'XYZ') {\n      space = 'world'\n    }\n\n    if (object === undefined || axis === null || this.dragging === false || pointer.button !== -1) return\n\n    this.raycaster.setFromCamera((pointer as unknown) as Vector2, this.camera)\n\n    const planeIntersect = this.intersectObjectWithRay(this.plane, this.raycaster, true)\n\n    if (!planeIntersect) return\n\n    this.pointEnd.copy(planeIntersect.point).sub(this.worldPositionStart)\n\n    if (mode === 'translate') {\n      // Apply translate\n\n      this.offset.copy(this.pointEnd).sub(this.pointStart)\n\n      if (space === 'local' && axis !== 'XYZ') {\n        this.offset.applyQuaternion(this.worldQuaternionInv)\n      }\n\n      if (axis.indexOf('X') === -1) this.offset.x = 0\n      if (axis.indexOf('Y') === -1) this.offset.y = 0\n      if (axis.indexOf('Z') === -1) this.offset.z = 0\n\n      if (space === 'local' && axis !== 'XYZ') {\n        this.offset.applyQuaternion(this.quaternionStart).divide(this.parentScale)\n      } else {\n        this.offset.applyQuaternion(this.parentQuaternionInv).divide(this.parentScale)\n      }\n\n      object.position.copy(this.offset).add(this.positionStart)\n\n      // Apply translation snap\n\n      if (this.translationSnap) {\n        if (space === 'local') {\n          object.position.applyQuaternion(this.tempQuaternion.copy(this.quaternionStart).invert())\n\n          if (axis.search('X') !== -1) {\n            object.position.x = Math.round(object.position.x / this.translationSnap) * this.translationSnap\n          }\n\n          if (axis.search('Y') !== -1) {\n            object.position.y = Math.round(object.position.y / this.translationSnap) * this.translationSnap\n          }\n\n          if (axis.search('Z') !== -1) {\n            object.position.z = Math.round(object.position.z / this.translationSnap) * this.translationSnap\n          }\n\n          object.position.applyQuaternion(this.quaternionStart)\n        }\n\n        if (space === 'world') {\n          if (object.parent) {\n            object.position.add(this.tempVector.setFromMatrixPosition(object.parent.matrixWorld))\n          }\n\n          if (axis.search('X') !== -1) {\n            object.position.x = Math.round(object.position.x / this.translationSnap) * this.translationSnap\n          }\n\n          if (axis.search('Y') !== -1) {\n            object.position.y = Math.round(object.position.y / this.translationSnap) * this.translationSnap\n          }\n\n          if (axis.search('Z') !== -1) {\n            object.position.z = Math.round(object.position.z / this.translationSnap) * this.translationSnap\n          }\n\n          if (object.parent) {\n            object.position.sub(this.tempVector.setFromMatrixPosition(object.parent.matrixWorld))\n          }\n        }\n      }\n    } else if (mode === 'scale') {\n      if (axis.search('XYZ') !== -1) {\n        let d = this.pointEnd.length() / this.pointStart.length()\n\n        if (this.pointEnd.dot(this.pointStart) < 0) d *= -1\n\n        this.tempVector2.set(d, d, d)\n      } else {\n        this.tempVector.copy(this.pointStart)\n        this.tempVector2.copy(this.pointEnd)\n\n        this.tempVector.applyQuaternion(this.worldQuaternionInv)\n        this.tempVector2.applyQuaternion(this.worldQuaternionInv)\n\n        this.tempVector2.divide(this.tempVector)\n\n        if (axis.search('X') === -1) {\n          this.tempVector2.x = 1\n        }\n\n        if (axis.search('Y') === -1) {\n          this.tempVector2.y = 1\n        }\n\n        if (axis.search('Z') === -1) {\n          this.tempVector2.z = 1\n        }\n      }\n\n      // Apply scale\n\n      object.scale.copy(this.scaleStart).multiply(this.tempVector2)\n\n      if (this.scaleSnap && this.object) {\n        if (axis.search('X') !== -1) {\n          this.object.scale.x = Math.round(object.scale.x / this.scaleSnap) * this.scaleSnap || this.scaleSnap\n        }\n\n        if (axis.search('Y') !== -1) {\n          object.scale.y = Math.round(object.scale.y / this.scaleSnap) * this.scaleSnap || this.scaleSnap\n        }\n\n        if (axis.search('Z') !== -1) {\n          object.scale.z = Math.round(object.scale.z / this.scaleSnap) * this.scaleSnap || this.scaleSnap\n        }\n      }\n    } else if (mode === 'rotate') {\n      this.offset.copy(this.pointEnd).sub(this.pointStart)\n\n      const ROTATION_SPEED =\n        20 / this.worldPosition.distanceTo(this.tempVector.setFromMatrixPosition(this.camera.matrixWorld))\n\n      if (axis === 'E') {\n        this.rotationAxis.copy(this.eye)\n        this.rotationAngle = this.pointEnd.angleTo(this.pointStart)\n\n        this.startNorm.copy(this.pointStart).normalize()\n        this.endNorm.copy(this.pointEnd).normalize()\n\n        this.rotationAngle *= this.endNorm.cross(this.startNorm).dot(this.eye) < 0 ? 1 : -1\n      } else if (axis === 'XYZE') {\n        this.rotationAxis.copy(this.offset).cross(this.eye).normalize()\n        this.rotationAngle = this.offset.dot(this.tempVector.copy(this.rotationAxis).cross(this.eye)) * ROTATION_SPEED\n      } else if (axis === 'X' || axis === 'Y' || axis === 'Z') {\n        this.rotationAxis.copy(this.unit[axis])\n\n        this.tempVector.copy(this.unit[axis])\n\n        if (space === 'local') {\n          this.tempVector.applyQuaternion(this.worldQuaternion)\n        }\n\n        this.rotationAngle = this.offset.dot(this.tempVector.cross(this.eye).normalize()) * ROTATION_SPEED\n      }\n\n      // Apply rotation snap\n\n      if (this.rotationSnap) {\n        this.rotationAngle = Math.round(this.rotationAngle / this.rotationSnap) * this.rotationSnap\n      }\n\n      // Apply rotate\n      if (space === 'local' && axis !== 'E' && axis !== 'XYZE') {\n        object.quaternion.copy(this.quaternionStart)\n        object.quaternion\n          .multiply(this.tempQuaternion.setFromAxisAngle(this.rotationAxis, this.rotationAngle))\n          .normalize()\n      } else {\n        this.rotationAxis.applyQuaternion(this.parentQuaternionInv)\n        object.quaternion.copy(this.tempQuaternion.setFromAxisAngle(this.rotationAxis, this.rotationAngle))\n        object.quaternion.multiply(this.quaternionStart).normalize()\n      }\n    }\n\n    // @ts-ignore\n    this.dispatchEvent(this.changeEvent)\n    // @ts-ignore\n    this.dispatchEvent(this.objectChangeEvent)\n  }\n\n  private pointerUp = (pointer: TransformControlsPointerObject): void => {\n    if (pointer.button !== 0) return\n\n    if (this.dragging && this.axis !== null) {\n      this.mouseUpEvent.mode = this.mode\n      // @ts-ignore\n      this.dispatchEvent(this.mouseUpEvent)\n    }\n\n    this.dragging = false\n    this.axis = null\n  }\n\n  private getPointer = (event: Event): TransformControlsPointerObject => {\n    if (this.domElement && this.domElement.ownerDocument?.pointerLockElement) {\n      return {\n        x: 0,\n        y: 0,\n        button: (event as MouseEvent).button,\n      }\n    } else {\n      const pointer = (event as TouchEvent).changedTouches\n        ? (event as TouchEvent).changedTouches[0]\n        : (event as MouseEvent)\n\n      const rect = this.domElement!.getBoundingClientRect()\n\n      return {\n        x: ((pointer.clientX - rect.left) / rect.width) * 2 - 1,\n        y: (-(pointer.clientY - rect.top) / rect.height) * 2 + 1,\n        button: (event as MouseEvent).button,\n      }\n    }\n  }\n\n  private onPointerHover = (event: Event): void => {\n    if (!this.enabled) return\n\n    switch ((event as PointerEvent).pointerType) {\n      case 'mouse':\n      case 'pen':\n        this.pointerHover(this.getPointer(event))\n        break\n    }\n  }\n\n  private onPointerDown = (event: Event): void => {\n    if (!this.enabled || !this.domElement) return\n\n    this.domElement.style.touchAction = 'none' // disable touch scroll\n    this.domElement.ownerDocument.addEventListener('pointermove', this.onPointerMove)\n    this.pointerHover(this.getPointer(event))\n    this.pointerDown(this.getPointer(event))\n  }\n\n  private onPointerMove = (event: Event): void => {\n    if (!this.enabled) return\n\n    this.pointerMove(this.getPointer(event))\n  }\n\n  private onPointerUp = (event: Event): void => {\n    if (!this.enabled || !this.domElement) return\n\n    this.domElement.style.touchAction! = ''\n    this.domElement.ownerDocument.removeEventListener('pointermove', this.onPointerMove)\n\n    this.pointerUp(this.getPointer(event))\n  }\n\n  public getMode = (): TransformControls['mode'] => this.mode\n\n  public setMode = (mode: TransformControls['mode']): void => {\n    this.mode = mode\n  }\n\n  public setTranslationSnap = (translationSnap: number): void => {\n    this.translationSnap = translationSnap\n  }\n\n  public setRotationSnap = (rotationSnap: number): void => {\n    this.rotationSnap = rotationSnap\n  }\n\n  public setScaleSnap = (scaleSnap: number): void => {\n    this.scaleSnap = scaleSnap\n  }\n\n  public setSize = (size: number): void => {\n    this.size = size\n  }\n\n  public setSpace = (space: string): void => {\n    this.space = space\n  }\n\n  public update = (): void => {\n    console.warn(\n      'THREE.TransformControls: update function has no more functionality and therefore has been deprecated.',\n    )\n  }\n\n  public connect = (domElement: HTMLElement): void => {\n    if ((domElement as any) === document) {\n      console.error(\n        'THREE.OrbitControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.',\n      )\n    }\n    this.domElement = domElement\n\n    this.domElement.addEventListener('pointerdown', this.onPointerDown)\n    this.domElement.addEventListener('pointermove', this.onPointerHover)\n    this.domElement.ownerDocument.addEventListener('pointerup', this.onPointerUp)\n  }\n\n  public dispose = (): void => {\n    this.domElement?.removeEventListener('pointerdown', this.onPointerDown)\n    this.domElement?.removeEventListener('pointermove', this.onPointerHover)\n    this.domElement?.ownerDocument?.removeEventListener('pointermove', this.onPointerMove)\n    this.domElement?.ownerDocument?.removeEventListener('pointerup', this.onPointerUp)\n\n    this.traverse((child) => {\n      const mesh = child as Mesh<BufferGeometry, Material>\n      if (mesh.geometry) {\n        mesh.geometry.dispose()\n      }\n      if (mesh.material) {\n        mesh.material.dispose()\n      }\n    })\n  }\n}\n\ntype TransformControlsGizmoPrivateGizmos = {\n  ['translate']: Object3D\n  ['scale']: Object3D\n  ['rotate']: Object3D\n  ['visible']: boolean\n}\n\nclass TransformControlsGizmo extends Object3D {\n  private isTransformControlsGizmo = true\n  public type = 'TransformControlsGizmo'\n\n  private tempVector = new Vector3(0, 0, 0)\n  private tempEuler = new Euler()\n  private alignVector = new Vector3(0, 1, 0)\n  private zeroVector = new Vector3(0, 0, 0)\n  private lookAtMatrix = new Matrix4()\n  private tempQuaternion = new Quaternion()\n  private tempQuaternion2 = new Quaternion()\n  private identityQuaternion = new Quaternion()\n\n  private unitX = new Vector3(1, 0, 0)\n  private unitY = new Vector3(0, 1, 0)\n  private unitZ = new Vector3(0, 0, 1)\n\n  private gizmo: TransformControlsGizmoPrivateGizmos\n  public picker: TransformControlsGizmoPrivateGizmos\n  private helper: TransformControlsGizmoPrivateGizmos\n\n  // these are set from parent class TransformControls\n  private rotationAxis = new Vector3()\n\n  private cameraPosition = new Vector3()\n\n  private worldPositionStart = new Vector3()\n  private worldQuaternionStart = new Quaternion()\n\n  private worldPosition = new Vector3()\n  private worldQuaternion = new Quaternion()\n\n  private eye = new Vector3()\n\n  private camera: PerspectiveCamera | OrthographicCamera = null!\n  private enabled = true\n  private axis: string | null = null\n  private mode: 'translate' | 'rotate' | 'scale' = 'translate'\n  private space = 'world'\n  private size = 1\n  private dragging = false\n  private showX = true\n  private showY = true\n  private showZ = true\n\n  constructor() {\n    super()\n\n    const gizmoMaterial = new MeshBasicMaterial({\n      depthTest: false,\n      depthWrite: false,\n      transparent: true,\n      side: DoubleSide,\n      fog: false,\n      toneMapped: false,\n    })\n\n    const gizmoLineMaterial = new LineBasicMaterial({\n      depthTest: false,\n      depthWrite: false,\n      transparent: true,\n      linewidth: 1,\n      fog: false,\n      toneMapped: false,\n    })\n\n    // Make unique material for each axis/color\n\n    const matInvisible = gizmoMaterial.clone()\n    matInvisible.opacity = 0.15\n\n    const matHelper = gizmoMaterial.clone()\n    matHelper.opacity = 0.33\n\n    const matRed = gizmoMaterial.clone() as MeshBasicMaterial\n    matRed.color.set(0xff0000)\n\n    const matGreen = gizmoMaterial.clone() as MeshBasicMaterial\n    matGreen.color.set(0x00ff00)\n\n    const matBlue = gizmoMaterial.clone() as MeshBasicMaterial\n    matBlue.color.set(0x0000ff)\n\n    const matWhiteTransparent = gizmoMaterial.clone() as MeshBasicMaterial\n    matWhiteTransparent.opacity = 0.25\n\n    const matYellowTransparent = matWhiteTransparent.clone() as MeshBasicMaterial\n    matYellowTransparent.color.set(0xffff00)\n\n    const matCyanTransparent = matWhiteTransparent.clone() as MeshBasicMaterial\n    matCyanTransparent.color.set(0x00ffff)\n\n    const matMagentaTransparent = matWhiteTransparent.clone() as MeshBasicMaterial\n    matMagentaTransparent.color.set(0xff00ff)\n\n    const matYellow = gizmoMaterial.clone() as MeshBasicMaterial\n    matYellow.color.set(0xffff00)\n\n    const matLineRed = gizmoLineMaterial.clone() as LineBasicMaterial\n    matLineRed.color.set(0xff0000)\n\n    const matLineGreen = gizmoLineMaterial.clone() as LineBasicMaterial\n    matLineGreen.color.set(0x00ff00)\n\n    const matLineBlue = gizmoLineMaterial.clone() as LineBasicMaterial\n    matLineBlue.color.set(0x0000ff)\n\n    const matLineCyan = gizmoLineMaterial.clone() as LineBasicMaterial\n    matLineCyan.color.set(0x00ffff)\n\n    const matLineMagenta = gizmoLineMaterial.clone() as LineBasicMaterial\n    matLineMagenta.color.set(0xff00ff)\n\n    const matLineYellow = gizmoLineMaterial.clone() as LineBasicMaterial\n    matLineYellow.color.set(0xffff00)\n\n    const matLineGray = gizmoLineMaterial.clone() as LineBasicMaterial\n    matLineGray.color.set(0x787878)\n\n    const matLineYellowTransparent = matLineYellow.clone() as LineBasicMaterial\n    matLineYellowTransparent.opacity = 0.25\n\n    // reusable geometry\n\n    const arrowGeometry = new CylinderGeometry(0, 0.05, 0.2, 12, 1, false)\n\n    const scaleHandleGeometry = new BoxGeometry(0.125, 0.125, 0.125)\n\n    const lineGeometry = new BufferGeometry()\n    lineGeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 1, 0, 0], 3))\n\n    const CircleGeometry = (radius: number, arc: number): BufferGeometry => {\n      const geometry = new BufferGeometry()\n      const vertices = []\n\n      for (let i = 0; i <= 64 * arc; ++i) {\n        vertices.push(0, Math.cos((i / 32) * Math.PI) * radius, Math.sin((i / 32) * Math.PI) * radius)\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3))\n\n      return geometry\n    }\n\n    // Special geometry for transform helper. If scaled with position vector it spans from [0,0,0] to position\n\n    const TranslateHelperGeometry = (): BufferGeometry => {\n      const geometry = new BufferGeometry()\n\n      geometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 1, 1, 1], 3))\n\n      return geometry\n    }\n\n    // Gizmo definitions - custom hierarchy definitions for setupGizmo() function\n\n    const gizmoTranslate = {\n      X: [\n        [new Mesh(arrowGeometry, matRed), [1, 0, 0], [0, 0, -Math.PI / 2], null, 'fwd'],\n        [new Mesh(arrowGeometry, matRed), [1, 0, 0], [0, 0, Math.PI / 2], null, 'bwd'],\n        [new Line(lineGeometry, matLineRed)],\n      ],\n      Y: [\n        [new Mesh(arrowGeometry, matGreen), [0, 1, 0], null, null, 'fwd'],\n        [new Mesh(arrowGeometry, matGreen), [0, 1, 0], [Math.PI, 0, 0], null, 'bwd'],\n        [new Line(lineGeometry, matLineGreen), null, [0, 0, Math.PI / 2]],\n      ],\n      Z: [\n        [new Mesh(arrowGeometry, matBlue), [0, 0, 1], [Math.PI / 2, 0, 0], null, 'fwd'],\n        [new Mesh(arrowGeometry, matBlue), [0, 0, 1], [-Math.PI / 2, 0, 0], null, 'bwd'],\n        [new Line(lineGeometry, matLineBlue), null, [0, -Math.PI / 2, 0]],\n      ],\n      XYZ: [[new Mesh(new OctahedronGeometry(0.1, 0), matWhiteTransparent.clone()), [0, 0, 0], [0, 0, 0]]],\n      XY: [\n        [new Mesh(new PlaneGeometry(0.295, 0.295), matYellowTransparent.clone()), [0.15, 0.15, 0]],\n        [new Line(lineGeometry, matLineYellow), [0.18, 0.3, 0], null, [0.125, 1, 1]],\n        [new Line(lineGeometry, matLineYellow), [0.3, 0.18, 0], [0, 0, Math.PI / 2], [0.125, 1, 1]],\n      ],\n      YZ: [\n        [new Mesh(new PlaneGeometry(0.295, 0.295), matCyanTransparent.clone()), [0, 0.15, 0.15], [0, Math.PI / 2, 0]],\n        [new Line(lineGeometry, matLineCyan), [0, 0.18, 0.3], [0, 0, Math.PI / 2], [0.125, 1, 1]],\n        [new Line(lineGeometry, matLineCyan), [0, 0.3, 0.18], [0, -Math.PI / 2, 0], [0.125, 1, 1]],\n      ],\n      XZ: [\n        [\n          new Mesh(new PlaneGeometry(0.295, 0.295), matMagentaTransparent.clone()),\n          [0.15, 0, 0.15],\n          [-Math.PI / 2, 0, 0],\n        ],\n        [new Line(lineGeometry, matLineMagenta), [0.18, 0, 0.3], null, [0.125, 1, 1]],\n        [new Line(lineGeometry, matLineMagenta), [0.3, 0, 0.18], [0, -Math.PI / 2, 0], [0.125, 1, 1]],\n      ],\n    }\n\n    const pickerTranslate = {\n      X: [[new Mesh(new CylinderGeometry(0.2, 0, 1, 4, 1, false), matInvisible), [0.6, 0, 0], [0, 0, -Math.PI / 2]]],\n      Y: [[new Mesh(new CylinderGeometry(0.2, 0, 1, 4, 1, false), matInvisible), [0, 0.6, 0]]],\n      Z: [[new Mesh(new CylinderGeometry(0.2, 0, 1, 4, 1, false), matInvisible), [0, 0, 0.6], [Math.PI / 2, 0, 0]]],\n      XYZ: [[new Mesh(new OctahedronGeometry(0.2, 0), matInvisible)]],\n      XY: [[new Mesh(new PlaneGeometry(0.4, 0.4), matInvisible), [0.2, 0.2, 0]]],\n      YZ: [[new Mesh(new PlaneGeometry(0.4, 0.4), matInvisible), [0, 0.2, 0.2], [0, Math.PI / 2, 0]]],\n      XZ: [[new Mesh(new PlaneGeometry(0.4, 0.4), matInvisible), [0.2, 0, 0.2], [-Math.PI / 2, 0, 0]]],\n    }\n\n    const helperTranslate = {\n      START: [[new Mesh(new OctahedronGeometry(0.01, 2), matHelper), null, null, null, 'helper']],\n      END: [[new Mesh(new OctahedronGeometry(0.01, 2), matHelper), null, null, null, 'helper']],\n      DELTA: [[new Line(TranslateHelperGeometry(), matHelper), null, null, null, 'helper']],\n      X: [[new Line(lineGeometry, matHelper.clone()), [-1e3, 0, 0], null, [1e6, 1, 1], 'helper']],\n      Y: [[new Line(lineGeometry, matHelper.clone()), [0, -1e3, 0], [0, 0, Math.PI / 2], [1e6, 1, 1], 'helper']],\n      Z: [[new Line(lineGeometry, matHelper.clone()), [0, 0, -1e3], [0, -Math.PI / 2, 0], [1e6, 1, 1], 'helper']],\n    }\n\n    const gizmoRotate = {\n      X: [\n        [new Line(CircleGeometry(1, 0.5), matLineRed)],\n        [new Mesh(new OctahedronGeometry(0.04, 0), matRed), [0, 0, 0.99], null, [1, 3, 1]],\n      ],\n      Y: [\n        [new Line(CircleGeometry(1, 0.5), matLineGreen), null, [0, 0, -Math.PI / 2]],\n        [new Mesh(new OctahedronGeometry(0.04, 0), matGreen), [0, 0, 0.99], null, [3, 1, 1]],\n      ],\n      Z: [\n        [new Line(CircleGeometry(1, 0.5), matLineBlue), null, [0, Math.PI / 2, 0]],\n        [new Mesh(new OctahedronGeometry(0.04, 0), matBlue), [0.99, 0, 0], null, [1, 3, 1]],\n      ],\n      E: [\n        [new Line(CircleGeometry(1.25, 1), matLineYellowTransparent), null, [0, Math.PI / 2, 0]],\n        [\n          new Mesh(new CylinderGeometry(0.03, 0, 0.15, 4, 1, false), matLineYellowTransparent),\n          [1.17, 0, 0],\n          [0, 0, -Math.PI / 2],\n          [1, 1, 0.001],\n        ],\n        [\n          new Mesh(new CylinderGeometry(0.03, 0, 0.15, 4, 1, false), matLineYellowTransparent),\n          [-1.17, 0, 0],\n          [0, 0, Math.PI / 2],\n          [1, 1, 0.001],\n        ],\n        [\n          new Mesh(new CylinderGeometry(0.03, 0, 0.15, 4, 1, false), matLineYellowTransparent),\n          [0, -1.17, 0],\n          [Math.PI, 0, 0],\n          [1, 1, 0.001],\n        ],\n        [\n          new Mesh(new CylinderGeometry(0.03, 0, 0.15, 4, 1, false), matLineYellowTransparent),\n          [0, 1.17, 0],\n          [0, 0, 0],\n          [1, 1, 0.001],\n        ],\n      ],\n      XYZE: [[new Line(CircleGeometry(1, 1), matLineGray), null, [0, Math.PI / 2, 0]]],\n    }\n\n    const helperRotate = {\n      AXIS: [[new Line(lineGeometry, matHelper.clone()), [-1e3, 0, 0], null, [1e6, 1, 1], 'helper']],\n    }\n\n    const pickerRotate = {\n      X: [[new Mesh(new TorusGeometry(1, 0.1, 4, 24), matInvisible), [0, 0, 0], [0, -Math.PI / 2, -Math.PI / 2]]],\n      Y: [[new Mesh(new TorusGeometry(1, 0.1, 4, 24), matInvisible), [0, 0, 0], [Math.PI / 2, 0, 0]]],\n      Z: [[new Mesh(new TorusGeometry(1, 0.1, 4, 24), matInvisible), [0, 0, 0], [0, 0, -Math.PI / 2]]],\n      E: [[new Mesh(new TorusGeometry(1.25, 0.1, 2, 24), matInvisible)]],\n      XYZE: [[new Mesh(new SphereGeometry(0.7, 10, 8), matInvisible)]],\n    }\n\n    const gizmoScale = {\n      X: [\n        [new Mesh(scaleHandleGeometry, matRed), [0.8, 0, 0], [0, 0, -Math.PI / 2]],\n        [new Line(lineGeometry, matLineRed), null, null, [0.8, 1, 1]],\n      ],\n      Y: [\n        [new Mesh(scaleHandleGeometry, matGreen), [0, 0.8, 0]],\n        [new Line(lineGeometry, matLineGreen), null, [0, 0, Math.PI / 2], [0.8, 1, 1]],\n      ],\n      Z: [\n        [new Mesh(scaleHandleGeometry, matBlue), [0, 0, 0.8], [Math.PI / 2, 0, 0]],\n        [new Line(lineGeometry, matLineBlue), null, [0, -Math.PI / 2, 0], [0.8, 1, 1]],\n      ],\n      XY: [\n        [new Mesh(scaleHandleGeometry, matYellowTransparent), [0.85, 0.85, 0], null, [2, 2, 0.2]],\n        [new Line(lineGeometry, matLineYellow), [0.855, 0.98, 0], null, [0.125, 1, 1]],\n        [new Line(lineGeometry, matLineYellow), [0.98, 0.855, 0], [0, 0, Math.PI / 2], [0.125, 1, 1]],\n      ],\n      YZ: [\n        [new Mesh(scaleHandleGeometry, matCyanTransparent), [0, 0.85, 0.85], null, [0.2, 2, 2]],\n        [new Line(lineGeometry, matLineCyan), [0, 0.855, 0.98], [0, 0, Math.PI / 2], [0.125, 1, 1]],\n        [new Line(lineGeometry, matLineCyan), [0, 0.98, 0.855], [0, -Math.PI / 2, 0], [0.125, 1, 1]],\n      ],\n      XZ: [\n        [new Mesh(scaleHandleGeometry, matMagentaTransparent), [0.85, 0, 0.85], null, [2, 0.2, 2]],\n        [new Line(lineGeometry, matLineMagenta), [0.855, 0, 0.98], null, [0.125, 1, 1]],\n        [new Line(lineGeometry, matLineMagenta), [0.98, 0, 0.855], [0, -Math.PI / 2, 0], [0.125, 1, 1]],\n      ],\n      XYZX: [[new Mesh(new BoxGeometry(0.125, 0.125, 0.125), matWhiteTransparent.clone()), [1.1, 0, 0]]],\n      XYZY: [[new Mesh(new BoxGeometry(0.125, 0.125, 0.125), matWhiteTransparent.clone()), [0, 1.1, 0]]],\n      XYZZ: [[new Mesh(new BoxGeometry(0.125, 0.125, 0.125), matWhiteTransparent.clone()), [0, 0, 1.1]]],\n    }\n\n    const pickerScale = {\n      X: [[new Mesh(new CylinderGeometry(0.2, 0, 0.8, 4, 1, false), matInvisible), [0.5, 0, 0], [0, 0, -Math.PI / 2]]],\n      Y: [[new Mesh(new CylinderGeometry(0.2, 0, 0.8, 4, 1, false), matInvisible), [0, 0.5, 0]]],\n      Z: [[new Mesh(new CylinderGeometry(0.2, 0, 0.8, 4, 1, false), matInvisible), [0, 0, 0.5], [Math.PI / 2, 0, 0]]],\n      XY: [[new Mesh(scaleHandleGeometry, matInvisible), [0.85, 0.85, 0], null, [3, 3, 0.2]]],\n      YZ: [[new Mesh(scaleHandleGeometry, matInvisible), [0, 0.85, 0.85], null, [0.2, 3, 3]]],\n      XZ: [[new Mesh(scaleHandleGeometry, matInvisible), [0.85, 0, 0.85], null, [3, 0.2, 3]]],\n      XYZX: [[new Mesh(new BoxGeometry(0.2, 0.2, 0.2), matInvisible), [1.1, 0, 0]]],\n      XYZY: [[new Mesh(new BoxGeometry(0.2, 0.2, 0.2), matInvisible), [0, 1.1, 0]]],\n      XYZZ: [[new Mesh(new BoxGeometry(0.2, 0.2, 0.2), matInvisible), [0, 0, 1.1]]],\n    }\n\n    const helperScale = {\n      X: [[new Line(lineGeometry, matHelper.clone()), [-1e3, 0, 0], null, [1e6, 1, 1], 'helper']],\n      Y: [[new Line(lineGeometry, matHelper.clone()), [0, -1e3, 0], [0, 0, Math.PI / 2], [1e6, 1, 1], 'helper']],\n      Z: [[new Line(lineGeometry, matHelper.clone()), [0, 0, -1e3], [0, -Math.PI / 2, 0], [1e6, 1, 1], 'helper']],\n    }\n\n    // Creates an Object3D with gizmos described in custom hierarchy definition.\n    // this is nearly impossible to Type so i'm leaving it\n    const setupGizmo = (gizmoMap: any): Object3D => {\n      const gizmo = new Object3D()\n\n      for (let name in gizmoMap) {\n        for (let i = gizmoMap[name].length; i--; ) {\n          const object = gizmoMap[name][i][0].clone() as Mesh\n          const position = gizmoMap[name][i][1]\n          const rotation = gizmoMap[name][i][2]\n          const scale = gizmoMap[name][i][3]\n          const tag = gizmoMap[name][i][4]\n\n          // name and tag properties are essential for picking and updating logic.\n          object.name = name\n          // @ts-ignore\n          object.tag = tag\n\n          if (position) {\n            object.position.set(position[0], position[1], position[2])\n          }\n\n          if (rotation) {\n            object.rotation.set(rotation[0], rotation[1], rotation[2])\n          }\n\n          if (scale) {\n            object.scale.set(scale[0], scale[1], scale[2])\n          }\n\n          object.updateMatrix()\n\n          const tempGeometry = object.geometry.clone()\n          tempGeometry.applyMatrix4(object.matrix)\n          object.geometry = tempGeometry\n          object.renderOrder = Infinity\n\n          object.position.set(0, 0, 0)\n          object.rotation.set(0, 0, 0)\n          object.scale.set(1, 1, 1)\n\n          gizmo.add(object)\n        }\n      }\n\n      return gizmo\n    }\n\n    this.gizmo = {} as TransformControlsGizmoPrivateGizmos\n    this.picker = {} as TransformControlsGizmoPrivateGizmos\n    this.helper = {} as TransformControlsGizmoPrivateGizmos\n\n    this.add((this.gizmo['translate'] = setupGizmo(gizmoTranslate)))\n    this.add((this.gizmo['rotate'] = setupGizmo(gizmoRotate)))\n    this.add((this.gizmo['scale'] = setupGizmo(gizmoScale)))\n    this.add((this.picker['translate'] = setupGizmo(pickerTranslate)))\n    this.add((this.picker['rotate'] = setupGizmo(pickerRotate)))\n    this.add((this.picker['scale'] = setupGizmo(pickerScale)))\n    this.add((this.helper['translate'] = setupGizmo(helperTranslate)))\n    this.add((this.helper['rotate'] = setupGizmo(helperRotate)))\n    this.add((this.helper['scale'] = setupGizmo(helperScale)))\n\n    // Pickers should be hidden always\n\n    this.picker['translate'].visible = false\n    this.picker['rotate'].visible = false\n    this.picker['scale'].visible = false\n  }\n\n  // updateMatrixWorld will update transformations and appearance of individual handles\n  public updateMatrixWorld = (): void => {\n    let space = this.space\n\n    if (this.mode === 'scale') {\n      space = 'local' // scale always oriented to local rotation\n    }\n\n    const quaternion = space === 'local' ? this.worldQuaternion : this.identityQuaternion\n\n    // Show only gizmos for current transform mode\n\n    this.gizmo['translate'].visible = this.mode === 'translate'\n    this.gizmo['rotate'].visible = this.mode === 'rotate'\n    this.gizmo['scale'].visible = this.mode === 'scale'\n\n    this.helper['translate'].visible = this.mode === 'translate'\n    this.helper['rotate'].visible = this.mode === 'rotate'\n    this.helper['scale'].visible = this.mode === 'scale'\n\n    let handles: Array<Object3D & { tag?: string }> = []\n    handles = handles.concat(this.picker[this.mode].children)\n    handles = handles.concat(this.gizmo[this.mode].children)\n    handles = handles.concat(this.helper[this.mode].children)\n\n    for (let i = 0; i < handles.length; i++) {\n      const handle = handles[i]\n\n      // hide aligned to camera\n\n      handle.visible = true\n      handle.rotation.set(0, 0, 0)\n      handle.position.copy(this.worldPosition)\n\n      let factor\n\n      if ((this.camera as OrthographicCamera).isOrthographicCamera) {\n        factor =\n          ((this.camera as OrthographicCamera).top - (this.camera as OrthographicCamera).bottom) /\n          (this.camera as OrthographicCamera).zoom\n      } else {\n        factor =\n          this.worldPosition.distanceTo(this.cameraPosition) *\n          Math.min((1.9 * Math.tan((Math.PI * (this.camera as PerspectiveCamera).fov) / 360)) / this.camera.zoom, 7)\n      }\n\n      handle.scale.set(1, 1, 1).multiplyScalar((factor * this.size) / 7)\n\n      // TODO: simplify helpers and consider decoupling from gizmo\n\n      if (handle.tag === 'helper') {\n        handle.visible = false\n\n        if (handle.name === 'AXIS') {\n          handle.position.copy(this.worldPositionStart)\n          handle.visible = !!this.axis\n\n          if (this.axis === 'X') {\n            this.tempQuaternion.setFromEuler(this.tempEuler.set(0, 0, 0))\n            handle.quaternion.copy(quaternion).multiply(this.tempQuaternion)\n\n            if (Math.abs(this.alignVector.copy(this.unitX).applyQuaternion(quaternion).dot(this.eye)) > 0.9) {\n              handle.visible = false\n            }\n          }\n\n          if (this.axis === 'Y') {\n            this.tempQuaternion.setFromEuler(this.tempEuler.set(0, 0, Math.PI / 2))\n            handle.quaternion.copy(quaternion).multiply(this.tempQuaternion)\n\n            if (Math.abs(this.alignVector.copy(this.unitY).applyQuaternion(quaternion).dot(this.eye)) > 0.9) {\n              handle.visible = false\n            }\n          }\n\n          if (this.axis === 'Z') {\n            this.tempQuaternion.setFromEuler(this.tempEuler.set(0, Math.PI / 2, 0))\n            handle.quaternion.copy(quaternion).multiply(this.tempQuaternion)\n\n            if (Math.abs(this.alignVector.copy(this.unitZ).applyQuaternion(quaternion).dot(this.eye)) > 0.9) {\n              handle.visible = false\n            }\n          }\n\n          if (this.axis === 'XYZE') {\n            this.tempQuaternion.setFromEuler(this.tempEuler.set(0, Math.PI / 2, 0))\n            this.alignVector.copy(this.rotationAxis)\n            handle.quaternion.setFromRotationMatrix(\n              this.lookAtMatrix.lookAt(this.zeroVector, this.alignVector, this.unitY),\n            )\n            handle.quaternion.multiply(this.tempQuaternion)\n            handle.visible = this.dragging\n          }\n\n          if (this.axis === 'E') {\n            handle.visible = false\n          }\n        } else if (handle.name === 'START') {\n          handle.position.copy(this.worldPositionStart)\n          handle.visible = this.dragging\n        } else if (handle.name === 'END') {\n          handle.position.copy(this.worldPosition)\n          handle.visible = this.dragging\n        } else if (handle.name === 'DELTA') {\n          handle.position.copy(this.worldPositionStart)\n          handle.quaternion.copy(this.worldQuaternionStart)\n          this.tempVector\n            .set(1e-10, 1e-10, 1e-10)\n            .add(this.worldPositionStart)\n            .sub(this.worldPosition)\n            .multiplyScalar(-1)\n          this.tempVector.applyQuaternion(this.worldQuaternionStart.clone().invert())\n          handle.scale.copy(this.tempVector)\n          handle.visible = this.dragging\n        } else {\n          handle.quaternion.copy(quaternion)\n\n          if (this.dragging) {\n            handle.position.copy(this.worldPositionStart)\n          } else {\n            handle.position.copy(this.worldPosition)\n          }\n\n          if (this.axis) {\n            handle.visible = this.axis.search(handle.name) !== -1\n          }\n        }\n\n        // If updating helper, skip rest of the loop\n        continue\n      }\n\n      // Align handles to current local or world rotation\n\n      handle.quaternion.copy(quaternion)\n\n      if (this.mode === 'translate' || this.mode === 'scale') {\n        // Hide translate and scale axis facing the camera\n\n        const AXIS_HIDE_TRESHOLD = 0.99\n        const PLANE_HIDE_TRESHOLD = 0.2\n        const AXIS_FLIP_TRESHOLD = 0.0\n\n        if (handle.name === 'X' || handle.name === 'XYZX') {\n          if (\n            Math.abs(this.alignVector.copy(this.unitX).applyQuaternion(quaternion).dot(this.eye)) > AXIS_HIDE_TRESHOLD\n          ) {\n            handle.scale.set(1e-10, 1e-10, 1e-10)\n            handle.visible = false\n          }\n        }\n\n        if (handle.name === 'Y' || handle.name === 'XYZY') {\n          if (\n            Math.abs(this.alignVector.copy(this.unitY).applyQuaternion(quaternion).dot(this.eye)) > AXIS_HIDE_TRESHOLD\n          ) {\n            handle.scale.set(1e-10, 1e-10, 1e-10)\n            handle.visible = false\n          }\n        }\n\n        if (handle.name === 'Z' || handle.name === 'XYZZ') {\n          if (\n            Math.abs(this.alignVector.copy(this.unitZ).applyQuaternion(quaternion).dot(this.eye)) > AXIS_HIDE_TRESHOLD\n          ) {\n            handle.scale.set(1e-10, 1e-10, 1e-10)\n            handle.visible = false\n          }\n        }\n\n        if (handle.name === 'XY') {\n          if (\n            Math.abs(this.alignVector.copy(this.unitZ).applyQuaternion(quaternion).dot(this.eye)) < PLANE_HIDE_TRESHOLD\n          ) {\n            handle.scale.set(1e-10, 1e-10, 1e-10)\n            handle.visible = false\n          }\n        }\n\n        if (handle.name === 'YZ') {\n          if (\n            Math.abs(this.alignVector.copy(this.unitX).applyQuaternion(quaternion).dot(this.eye)) < PLANE_HIDE_TRESHOLD\n          ) {\n            handle.scale.set(1e-10, 1e-10, 1e-10)\n            handle.visible = false\n          }\n        }\n\n        if (handle.name === 'XZ') {\n          if (\n            Math.abs(this.alignVector.copy(this.unitY).applyQuaternion(quaternion).dot(this.eye)) < PLANE_HIDE_TRESHOLD\n          ) {\n            handle.scale.set(1e-10, 1e-10, 1e-10)\n            handle.visible = false\n          }\n        }\n\n        // Flip translate and scale axis ocluded behind another axis\n\n        if (handle.name.search('X') !== -1) {\n          if (this.alignVector.copy(this.unitX).applyQuaternion(quaternion).dot(this.eye) < AXIS_FLIP_TRESHOLD) {\n            if (handle.tag === 'fwd') {\n              handle.visible = false\n            } else {\n              handle.scale.x *= -1\n            }\n          } else if (handle.tag === 'bwd') {\n            handle.visible = false\n          }\n        }\n\n        if (handle.name.search('Y') !== -1) {\n          if (this.alignVector.copy(this.unitY).applyQuaternion(quaternion).dot(this.eye) < AXIS_FLIP_TRESHOLD) {\n            if (handle.tag === 'fwd') {\n              handle.visible = false\n            } else {\n              handle.scale.y *= -1\n            }\n          } else if (handle.tag === 'bwd') {\n            handle.visible = false\n          }\n        }\n\n        if (handle.name.search('Z') !== -1) {\n          if (this.alignVector.copy(this.unitZ).applyQuaternion(quaternion).dot(this.eye) < AXIS_FLIP_TRESHOLD) {\n            if (handle.tag === 'fwd') {\n              handle.visible = false\n            } else {\n              handle.scale.z *= -1\n            }\n          } else if (handle.tag === 'bwd') {\n            handle.visible = false\n          }\n        }\n      } else if (this.mode === 'rotate') {\n        // Align handles to current local or world rotation\n\n        this.tempQuaternion2.copy(quaternion)\n        this.alignVector.copy(this.eye).applyQuaternion(this.tempQuaternion.copy(quaternion).invert())\n\n        if (handle.name.search('E') !== -1) {\n          handle.quaternion.setFromRotationMatrix(this.lookAtMatrix.lookAt(this.eye, this.zeroVector, this.unitY))\n        }\n\n        if (handle.name === 'X') {\n          this.tempQuaternion.setFromAxisAngle(this.unitX, Math.atan2(-this.alignVector.y, this.alignVector.z))\n          this.tempQuaternion.multiplyQuaternions(this.tempQuaternion2, this.tempQuaternion)\n          handle.quaternion.copy(this.tempQuaternion)\n        }\n\n        if (handle.name === 'Y') {\n          this.tempQuaternion.setFromAxisAngle(this.unitY, Math.atan2(this.alignVector.x, this.alignVector.z))\n          this.tempQuaternion.multiplyQuaternions(this.tempQuaternion2, this.tempQuaternion)\n          handle.quaternion.copy(this.tempQuaternion)\n        }\n\n        if (handle.name === 'Z') {\n          this.tempQuaternion.setFromAxisAngle(this.unitZ, Math.atan2(this.alignVector.y, this.alignVector.x))\n          this.tempQuaternion.multiplyQuaternions(this.tempQuaternion2, this.tempQuaternion)\n          handle.quaternion.copy(this.tempQuaternion)\n        }\n      }\n\n      // Hide disabled axes\n      handle.visible = handle.visible && (handle.name.indexOf('X') === -1 || this.showX)\n      handle.visible = handle.visible && (handle.name.indexOf('Y') === -1 || this.showY)\n      handle.visible = handle.visible && (handle.name.indexOf('Z') === -1 || this.showZ)\n      handle.visible = handle.visible && (handle.name.indexOf('E') === -1 || (this.showX && this.showY && this.showZ))\n\n      // highlight selected axis\n\n      //@ts-ignore\n      handle.material.tempOpacity = handle.material.tempOpacity || handle.material.opacity\n      //@ts-ignore\n      handle.material.tempColor = handle.material.tempColor || handle.material.color.clone()\n      //@ts-ignore\n      handle.material.color.copy(handle.material.tempColor)\n      //@ts-ignore\n      handle.material.opacity = handle.material.tempOpacity\n\n      if (!this.enabled) {\n        //@ts-ignore\n        handle.material.opacity *= 0.5\n        //@ts-ignore\n        handle.material.color.lerp(new Color(1, 1, 1), 0.5)\n      } else if (this.axis) {\n        if (handle.name === this.axis) {\n          //@ts-ignore\n          handle.material.opacity = 1.0\n          //@ts-ignore\n          handle.material.color.lerp(new Color(1, 1, 1), 0.5)\n        } else if (\n          this.axis.split('').some(function (a) {\n            return handle.name === a\n          })\n        ) {\n          //@ts-ignore\n          handle.material.opacity = 1.0\n          //@ts-ignore\n          handle.material.color.lerp(new Color(1, 1, 1), 0.5)\n        } else {\n          //@ts-ignore\n          handle.material.opacity *= 0.25\n          //@ts-ignore\n          handle.material.color.lerp(new Color(1, 1, 1), 0.5)\n        }\n      }\n    }\n\n    super.updateMatrixWorld()\n  }\n}\n\nclass TransformControlsPlane extends Mesh<PlaneGeometry, MeshBasicMaterial> {\n  private isTransformControlsPlane = true\n  public type = 'TransformControlsPlane'\n\n  constructor() {\n    super(\n      new PlaneGeometry(100000, 100000, 2, 2),\n      new MeshBasicMaterial({\n        visible: false,\n        wireframe: true,\n        side: DoubleSide,\n        transparent: true,\n        opacity: 0.1,\n        toneMapped: false,\n      }),\n    )\n  }\n\n  private unitX = new Vector3(1, 0, 0)\n  private unitY = new Vector3(0, 1, 0)\n  private unitZ = new Vector3(0, 0, 1)\n\n  private tempVector = new Vector3()\n  private dirVector = new Vector3()\n  private alignVector = new Vector3()\n  private tempMatrix = new Matrix4()\n  private identityQuaternion = new Quaternion()\n\n  // these are set from parent class TransformControls\n  private cameraQuaternion = new Quaternion()\n\n  private worldPosition = new Vector3()\n  private worldQuaternion = new Quaternion()\n\n  private eye = new Vector3()\n\n  private axis: string | null = null\n  private mode: 'translate' | 'rotate' | 'scale' = 'translate'\n  private space = 'world'\n\n  public updateMatrixWorld = (): void => {\n    let space = this.space\n\n    this.position.copy(this.worldPosition)\n\n    if (this.mode === 'scale') space = 'local' // scale always oriented to local rotation\n\n    this.unitX.set(1, 0, 0).applyQuaternion(space === 'local' ? this.worldQuaternion : this.identityQuaternion)\n    this.unitY.set(0, 1, 0).applyQuaternion(space === 'local' ? this.worldQuaternion : this.identityQuaternion)\n    this.unitZ.set(0, 0, 1).applyQuaternion(space === 'local' ? this.worldQuaternion : this.identityQuaternion)\n\n    // Align the plane for current transform mode, axis and space.\n\n    this.alignVector.copy(this.unitY)\n\n    switch (this.mode) {\n      case 'translate':\n      case 'scale':\n        switch (this.axis) {\n          case 'X':\n            this.alignVector.copy(this.eye).cross(this.unitX)\n            this.dirVector.copy(this.unitX).cross(this.alignVector)\n            break\n          case 'Y':\n            this.alignVector.copy(this.eye).cross(this.unitY)\n            this.dirVector.copy(this.unitY).cross(this.alignVector)\n            break\n          case 'Z':\n            this.alignVector.copy(this.eye).cross(this.unitZ)\n            this.dirVector.copy(this.unitZ).cross(this.alignVector)\n            break\n          case 'XY':\n            this.dirVector.copy(this.unitZ)\n            break\n          case 'YZ':\n            this.dirVector.copy(this.unitX)\n            break\n          case 'XZ':\n            this.alignVector.copy(this.unitZ)\n            this.dirVector.copy(this.unitY)\n            break\n          case 'XYZ':\n          case 'E':\n            this.dirVector.set(0, 0, 0)\n            break\n        }\n\n        break\n      case 'rotate':\n      default:\n        // special case for rotate\n        this.dirVector.set(0, 0, 0)\n    }\n\n    if (this.dirVector.length() === 0) {\n      // If in rotate mode, make the plane parallel to camera\n      this.quaternion.copy(this.cameraQuaternion)\n    } else {\n      this.tempMatrix.lookAt(this.tempVector.set(0, 0, 0), this.dirVector, this.alignVector)\n\n      this.quaternion.setFromRotationMatrix(this.tempMatrix)\n    }\n\n    super.updateMatrixWorld()\n  }\n}\n\nexport { TransformControls, TransformControlsGizmo, TransformControlsPlane }\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}